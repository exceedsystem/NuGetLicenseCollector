using System.Text.Json;
using Microsoft.Build.Construction;
using NuGetLicenseCollector.Interfaces;

namespace NuGetLicenseCollector.Services;

/// <summary>
/// Analyzes solution files to extract project information and NuGet package references
/// </summary>
public class SolutionAnalyzer : ISolutionAnalyzer
{
    /// <summary>
    /// Extracts all project file paths from a solution file
    /// </summary>
    /// <param name="solutionPath">Path to the solution (.sln) file</param>
    /// <returns>List of project file paths that exist on disk</returns>
    public async Task<List<string>> GetProjectFilesAsync(string solutionPath)
    {
        var projectFiles = new List<string>();

        try
        {
            var absoluteSolutionPath = Path.GetFullPath(solutionPath);
            var solution = SolutionFile.Parse(absoluteSolutionPath);
            var solutionDirectory = Path.GetDirectoryName(absoluteSolutionPath)!;

            foreach (var project in solution.ProjectsInOrder)
            {
                if (project.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat)
                {
                    var projectPath = Path.Combine(solutionDirectory, project.RelativePath);
                    if (File.Exists(projectPath))
                    {
                        projectFiles.Add(projectPath);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error parsing solution file: {ex.Message}");
        }

        return projectFiles;
    }

    /// <summary>
    /// Extracts NuGet package references from a project's lock file
    /// </summary>
    /// <param name="projectPath">Path to the project file (.csproj, .vbproj, etc.)</param>
    /// <returns>List of package names referenced by the project</returns>
    public async Task<List<string>> GetPackageReferencesAsync(string projectPath)
    {
        var packages = new List<string>();

        try
        {
            var projectDirectory = Path.GetDirectoryName(projectPath)!;
            // IMPORTANT: project.assets.json is generated by 'dotnet restore' and contains
            // the complete dependency resolution graph including transitive dependencies
            var lockFilePath = Path.Combine(projectDirectory, "obj", "project.assets.json");

            if (File.Exists(lockFilePath))
            {
                var json = await File.ReadAllTextAsync(lockFilePath);
                var lockFile = JsonSerializer.Deserialize<JsonElement>(json);

                if (lockFile.TryGetProperty("libraries", out var libraries))
                {
                    foreach (var library in libraries.EnumerateObject())
                    {
                        // Filter to only include NuGet packages, excluding project references
                        // Package names in libraries are in format "PackageName/Version"
                        if (library.Value.TryGetProperty("type", out var type) &&
                            type.GetString() == "package")
                        {
                            packages.Add(library.Name);
                            Console.WriteLine($"Found package: {library.Name}");
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine($"Lock file not found for project: {projectPath}");
                Console.WriteLine("Please run 'dotnet restore' first.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading project assets: {ex.Message}");
        }

        return packages;
    }
}